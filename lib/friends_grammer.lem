%include{
#include "friends_defs.h"
#include "friends_struct_data.h"
#include "friends_data.h"
#include "friends_error.h"
#include "friends_list.h"
#include "friends_parser_implement.h"

#ifdef assert
#undef assert
#endif

#define assert friendsAssert

typedef struct {
  friendsDataList *list;
  friendsData *verb;
} friendsPartData;

}

%extra_argument { friendsParser *p }
%name friendsParserCore
%token_prefix friends

friends_world ::= statements END.
statements ::= statements statement.

statement ::= friend_define.
statement ::= friend_ask.

friend_define ::= SUGOI friend_part(A) NANDANE. {
  friendsParserInsertProposition(p->parsed_data, p->park, NULL, A.list,
                                 A.verb, friendsPropositionNormal, &p->err);
}

friend_define ::= SUGOI friend_part(A) NANDANE TANOSHI. {
  friendsParserInsertProposition(p->parsed_data, p->park, NULL, A.list,
                                 A.verb, friendsPropositionStop, &p->err);
}

friend_define ::= SUGOI conditionals(A) THEN friend_part(B) NANDANE. {
  friendsParserInsertProposition(p->parsed_data, p->park, A, B.list,
                                 B.verb, friendsPropositionNormal, &p->err);
}

friend_define ::= SUGOI conditionals(A) THEN friend_part(B) NANDANE TANOSHI. {
  friendsParserInsertProposition(p->parsed_data, p->park, A, B.list,
                                 B.verb, friendsPropositionNormal, &p->err);
}

friend_ask ::= friend_part(A) NANDAKKE. {
  friendsParserInsertProposition(p->parsed_data, p->park, NULL, A.list,
                                 A.verb, friendsPropositionQuery, &p->err);
}

friend_ask ::= conditionals(A) THEN friend_part(B) NANDAKKE. {
  friendsParserInsertProposition(p->parsed_data, p->park, A, B.list,
                                 B.verb, friendsPropositionQuery, &p->err);
}

conditionals(A) ::= friend_part(B). {
  friendsDataList *l, *lp;
  friendsData *prop;
  l = NULL;
  lp = NULL;
  if (B.list && B.verb) {
    prop = friendsParserCreateProposition(p->park, NULL, B.list,
                                          B.verb, friendsPropositionNormal,
                                          &p->err);
    if (prop) {
      lp = friendsNewList(&p->err);
      if (lp) {
        l = friendsListAppend(l, prop, &p->err);
      }
    }
  }
  if (l) {
    A = lp;
  } else {
    A = NULL;
    friendsDeleteList(lp);
  }
}

conditionals(A) ::= conditionals(B) AND friend_part(C). {
  friendsDataList *l;
  friendsData *prop;
  l = NULL;
  if (B && C.list && C.verb) {
    prop = friendsParserCreateProposition(p->park, NULL, C.list,
                                          C.verb, friendsPropositionNormal,
                                          &p->err);
    if (prop) {
      l = friendsListAppend(B, prop, &p->err);
    }
  }
  if (l) {
    A = B;
  } else {
    A = NULL;
    friendsDeleteList(B);
  }
}

friend_part(A) ::= complete_list(B) FRIEND_NAME(C) FRIEND. {
  A.list = B;
  A.verb = C;
}

complete_list(A) ::= list(B) PARTICLE. { A = B; }
complete_list(A) ::= list(B) PARTICLE VARIABLE(C) TOKA PARTICLE. {
  friendsData *var;
  friendsDataList *l;
  l = NULL;
  var = NULL;
  if (B && C) {
    var = friendsParserCreateVariable(p->park, C, friendsTrue, &p->err);
    if (var) {
      l = friendsListAppend(B, var, &p->err);
    }
  }
  if (l) {
    A = B;
  } else {
    A = NULL;
    friendsDeleteList(B);
  }
}

list(A) ::= term(B). {
  friendsDataList *l;
  A = friendsNewList(&p->err);
  if (A && B) {
    l = friendsListAppend(A, B, &p->err);
  }
  if (!l) {
    friendsDeleteList(A);
    A = NULL;
  }
}

list(A) ::= list(B) PARTICLE term(C). {
  friendsDataList *l;
  l = NULL;
  if (B && C) {
    l = friendsListAppend(B, C, &p->err);
  }
  if (l) {
    A = B;
  } else {
    A = NULL;
    friendsDeleteList(B);
  }
}

term(A) ::= ATOM(B). {
  friendsData *atom;
  atom = NULL;
  if (B) {
    atom = friendsParserCreateAtom(p->park, friendsNumericAtom, B, &p->err);
  }
  A = atom;
}

term(A) ::= TSUGI(B). {
  friendsData *atom;
  atom = NULL;
  if (B) {
    atom = friendsParserCreateAtom(p->park, friendsTextAtom, B, &p->err);
  }
  A = atom;
}

term(A) ::= VARIABLE(B). {
  friendsData *var;
  var = NULL;
  if (B) {
    var = friendsParserCreateVariable(p->park, B, friendsFalse, &p->err);
  }
  A = var;
}

term(A) ::= LKAGI list(B) RKAGI. {
  friendsData *d;
  d = NULL;
  if (B) {
    d = friendsParserCreateListTerm(p->park, B, NULL, &p->err);
  }
  A = d;
  if (!d) {
    friendsDeleteList(B);
  }
}

term(A) ::= LKAGI list(B) PARTICLE RKAGI. {
  friendsData *d;
  d = NULL;
  if (B) {
    d = friendsParserCreateListTerm(p->park, B, NULL, &p->err);
  }
  A = d;
  if (!d) {
    friendsDeleteList(B);
  }
}

term(A) ::= LKAGI list(B) PARTICLE VARIABLE(C) TOKA RKAGI. {
  friendsData *d, *var;
  d = NULL;
  if (B && C) {
    var = friendsParserCreateVariable(p->park, C, friendsTrue, &p->err);
    if (var) {
      d = friendsParserCreateListTerm(p->park, B, var, &p->err);
    }
  }
  A = d;
  if (!d) {
    friendsDeleteList(B);
  }
}

term(A) ::= LKAGI list(B) PARTICLE VARIABLE(C) TOKA PARTICLE RKAGI. {
  friendsData *d, *var;
  d = NULL;
  if (B && C) {
    var = friendsParserCreateVariable(p->park, C, friendsTrue, &p->err);
    if (var) {
      d = friendsParserCreateListTerm(p->park, B, var, &p->err);
    }
  }
  A = d;
  if (!d) {
    friendsDeleteList(B);
  }
}

term(A) ::= term(B) NO ATOM(C). {
  friendsData *d, *atom;
  d = NULL;
  if (B && C) {
    atom = friendsParserCreateAtom(p->park, friendsNumericAtom, C, &p->err);
    if (atom) {
      d = friendsParserAddDataToTerm(B, atom, p->park, &p->err);
    }
  }
  A = d;
}

term(A) ::= term(B) NO TSUGI. {
  friendsData *d, *atom;
  d = NULL;
  if (B) {
    atom = friendsParserCreateAtom(p->park, friendsNextAtom, NULL, &p->err);
    if (atom) {
      d = friendsParserAddDataToTerm(B, atom, p->park, &p->err);
    }
  }
  A = d;
}

%type friend_part   {friendsPartData}
%type conditionals  {friendsDataList *}
%type complete_list {friendsDataList *}
%type list          {friendsDataList *}
%type term          {friendsData *}
%token_type         {friendsData *}
